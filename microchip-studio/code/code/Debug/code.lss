
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000074  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000514  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a4  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d9  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ba  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000fc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	1d c0       	rjmp	.+58     	; 0x70 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>

int main(void)
{
	// Make PB0 And PB1 As Output
	DDRB |= 1 << 0 | 1 << 1;
  38:	87 b3       	in	r24, 0x17	; 23
  3a:	83 60       	ori	r24, 0x03	; 3
  3c:	87 bb       	out	0x17, r24	; 23
	
	// Make PC0 And PC1 As Input
	DDRC &= ~(1 << 0 | 1 << 1);
  3e:	84 b3       	in	r24, 0x14	; 20
  40:	8c 7f       	andi	r24, 0xFC	; 252
  42:	84 bb       	out	0x14, r24	; 20
	
	// Write Logic High To PC0 And PC1, This Aims To Make PC0 And PC1 As Pull Up Mode Inputs
	PORTC |= 1 << 0 | 1 << 1;
  44:	85 b3       	in	r24, 0x15	; 21
  46:	83 60       	ori	r24, 0x03	; 3
  48:	85 bb       	out	0x15, r24	; 21
		- !(11111110 & 00000001)
		- !(00000000)
		- !(0)
		- 1
		*/
		if(!(PINC & (1 << 0)))
  4a:	98 99       	sbic	0x13, 0	; 19
  4c:	04 c0       	rjmp	.+8      	; 0x56 <__SREG__+0x17>
		{
			// PB0 HIGH
			PORTB |= 1 << 0;
  4e:	88 b3       	in	r24, 0x18	; 24
  50:	81 60       	ori	r24, 0x01	; 1
  52:	88 bb       	out	0x18, r24	; 24
  54:	03 c0       	rjmp	.+6      	; 0x5c <__SREG__+0x1d>
		- There Is No Need To Write This Condition Again, Because It Has Been Resolved Using else, This Is Just To Know How It Works
		*/
		else
		{
			// PB0 LOW
			PORTB &= ~(1 << 0);
  56:	88 b3       	in	r24, 0x18	; 24
  58:	8e 7f       	andi	r24, 0xFE	; 254
  5a:	88 bb       	out	0x18, r24	; 24
		- !(11111101 & 00000010)
		- !(00000000)
		- !(0)
		- 1
		*/
		if(!(PINC & (1 << 1))) 
  5c:	99 99       	sbic	0x13, 1	; 19
  5e:	04 c0       	rjmp	.+8      	; 0x68 <__SREG__+0x29>
		{
			// PB1 HIGH
			PORTB |= 1 << 1;	
  60:	88 b3       	in	r24, 0x18	; 24
  62:	82 60       	ori	r24, 0x02	; 2
  64:	88 bb       	out	0x18, r24	; 24
  66:	f1 cf       	rjmp	.-30     	; 0x4a <__SREG__+0xb>
		- There Is No Need To Write This Condition Again, Because It Has Been Resolved Using else, This Is Just To Know How It Works
		*/
		else
		{
			// PB1 LOW
			PORTB &= ~(1 << 1);	
  68:	88 b3       	in	r24, 0x18	; 24
  6a:	8d 7f       	andi	r24, 0xFD	; 253
  6c:	88 bb       	out	0x18, r24	; 24
  6e:	ed cf       	rjmp	.-38     	; 0x4a <__SREG__+0xb>

00000070 <_exit>:
  70:	f8 94       	cli

00000072 <__stop_program>:
  72:	ff cf       	rjmp	.-2      	; 0x72 <__stop_program>
